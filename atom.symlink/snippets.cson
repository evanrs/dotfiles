# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     prefix: 'log'
#     body: 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson



  # 'themr stateless component with imports':
  #     prefix: 'tsci'
  #     body: """
  #           import cx from 'classnames';
  #           import React, { PureComponent } from 'react';
  #           import PropTypes from 'prop-types';
  #           import { themr } from 'react-css-themr';
  #
  #           const ${1} = (({ className, theme, ...props }) => (
  #               <p className={cx(className, theme.${1})} {...props} />
  #           ));
  #
  #           export default themr('${1}', ${2:theme})(${1})
  #           export { ${1} }
  #     """
  # 'themr stateless component':
  #     prefix: 'tsc'
  #     body: """
  #         export const ${1} = themr('${1}', ${2:theme})(({ className, theme, ...props }) => (
  #             <${3:div} className={cx(className, theme.${1})} {...props}>
  #               ${4:Something brilliant ðŸ’¡}
  #             </${3:div}>
  #         ));
  #     """
  #

  # kill svg
  # ((\d\.\d\d\d)\d*)|\s+\bid[a-zA-Z0-9/\-_\='"&;]*

'.source.inside-js.css.styled':
  'SC prop destructure':
    prefix: 'scp'
    body: "${({ $1 }) => $1 && $2 }"
  'onProp conditional':
    prefix: 'onp'
    body: """
      ${onProp('$1', ($1) => $2)}
    """
  'onProp conditional css':
    prefix: 'onpc'
    body: """
      ${onProp('$1', ($1) => css`
        $2
      `)}
    """
  'mapProps to css':
    prefix: 'scm'
    body: """
      ${mapProps({
          $1
      })}
    """
  'mapProps to css function':
    prefix: 'scmfn'
    body: """
      ${mapProps({
          $1: ($1) => $2
      })}
    """
  'REM':
      prefix: 'rem'
      body: """
        ${rem($1)};
        $2
      """
  'REM value':
      prefix: 'remv'
      body: "${rem($1)} $2"
  'y-axis margin':
      prefix: 'my'
      body: """
        margin-top: $1;
        margin-bottom: $1;
      """
  'x-axis margin':
      prefix: 'mx'
      body: """
        margin-left: $1;
        margin-right: $1;
      """
  'y-axis padding':
      prefix: 'py'
      body: """
        padding-top: $1;
        padding-bottom: $1;
      """
  'x-axis padding':
      prefix: 'px'
      body: """
        padding-left: $1;
        padding-right: $1;
      """
  'total height':
      prefix: 'th'
      body: """
        min-height: $1;
        max-height: $1;
      """
  'total width':
      prefix: 'tw'
      body: """
        min-width: $1;
        max-width: $1;
      """


'.source.js, .source.ts, .source.ts.tsx, .source.tsx':
  'svg regex':
    prefix: 'svgoregex'
    body: """
        ((\d\.\d\d\d)\d*)|\s+\bid[a-zA-Z0-9/\-_\='"&;]*
    """
  'Object.keys(value)':
    prefix: 'okeys'
    body: 'Object.keys($1)$2'

  'JSON.stringify(_, null, 4)':
    prefix: 'json.'
    body: 'JSON.stringify($1, null, 4)$2'

  'console.log(`name`, name)':
    prefix: 'log'
    body: 'console.log(`$1`, $1)$2'

  'console.log ||':
    prefix: 'logor'
    body: 'console.log(`$1`, $1) || $2'

  'console.log JSON.stringify':
    prefix: 'logjson'
    body: 'console.log(`$1`, JSON.stringify($1, null, 4))$2'

  'debugger':
      prefix: 'debb'
      body: 'debugger;$1'

  'import defaults':
    prefix: 'iminlove'
    body: """
      import _ from 'lodash';
      import React, { PureComponent } from 'react';
      import PropTypes from 'prop-types';
      import styled, { css } from 'styled-components';
      ${1}
    """

  'import defaults + mobx':
    prefix: 'iminlovex'
    body: """
      import _ from 'lodash';
      import React, { PureComponent } from 'react';
      import PropTypes from 'prop-types';
      import styled, { css } from 'styled-components';
      import { observer } from 'mobx-react';
      ${1}
    """

  'import mobx observer':
    prefix: 'imob'
    body: """
      import { observer } from 'mobx-react';
      ${1}
    """

  'import web':
    prefix: 'imweb'
    body: """
      import { mapProps, colors } from 'theme';
      import ThemeProvider from 'theme/ThemeProvider';

      import Flex, { Fill } from 'components/Flex';
      ${1}
    """

  'import Lodash':
    prefix: 'imlo'
    body: """
      import _ from 'lodash';
      ${1}
    """
  'import Styled, { css }':
    prefix: 'imst'
    body: """
      import styled, { css } from 'styled-components';
      ${1}
    """
  'import React':
    prefix: 'imr'
    body: """
      import React from 'react';
      ${1}
    """
  'import ReactDom':
    prefix: 'imrd'
    body: """
      import ReactDom from 'react-dom';
      ${1}
    """

  'import React, { PureComponent }':
    prefix: 'imrc'
    body: """
      import React, { PureComponent } from 'react';
      ${1}
    """

  'import React, { Component, PropTypes }':
    prefix: 'imrcp'
    body: """
      import React, { PureComponent } from 'react';
      import PropTypes from 'prop-types';
      ${1}
    """

  'React Component':
    prefix: 'rc'
    body: """
      ${1:export }class ${2:MyComponent} extends Component {

        render() {
          return (
            ${3:<div>${2:MyComponent}</div>}
          );
        }

      }
    """

  'React PureComponent':
    prefix: 'rpc'
    body: """
      ${1:export }class ${2:MyComponent} extends PureComponent {

        render() {
          return (
            ${3:<div>${2:MyComponent}</div>}
          );
        }

      }
    """

  'React Arrow':
    prefix: 'rar'
    body: """
      ${1:export }const ${2:MyComponent} = (props) =>
        ${3:<div>${2:MyComponent}</div>}
    """

  'React Arrow Block':
    prefix: 'rarb'
    body: """
      ${1:export }const ${2:MyComponent} = (props) => {
        return (
          ${3:<div>${2:MyComponent}</div>}
        );
      }
    """

  'React Function':
    prefix: 'rfn'
    body: """
      ${1:export }function ${2:MyComponent} (props) {
        return (
          ${3:<div>${2:MyComponent}</div>}
        );
      }
    """

  'New React Component':
    prefix: 'nf-rcld'
    body: """
      import React, { PureComponent } from 'react';


      export default class ${1:MyComponent} extends PureComponent {

        render() {
          return (
            ${2:<div>MyComponent</div>}
          );
        }

      }
    """

  'New React Component with PropTypes':
    prefix: 'nf-rcldp'
    body: """
      import React, { PureComponent } from 'react';
      import PropTypes from 'prop-types';


      export default class ${1:MyComponent} extends PureComponent {
        static propTypes = {
          ${2}
        };

        render() {
          return (
            ${3:<div>MyComponent</div>}
          );
        }

      }
    """

  'New React Component export':
    prefix: 'nf-rcldps'
    body: """
      import React, { PureComponent } from 'react';
      import PropTypes from 'prop-types';


      class ${1:Class} extends PureComponent {
        static propTypes = {
          ${2}
        };

        state = {
          ${3}
        };

        render() {
          return (
            ${4:<div>MyComponent</div>}
          );
        }

      }

      export default ${1:Class};
    """

  'New React Functional Component':
    prefix: 'nf-rfn'
    body: """
      import React from 'react';
      import PropTypes from 'prop-types';


      export default function ${1}(${3:props}) {
        return (
          ${4:<div>MyComponent</div>}
        );
      }

      ${1}.propTypes = {
        ${2}
      };
    """

  'New React Functional Arrow Component export default':
    prefix: 'nf-rar'
    body: """
      import React from 'react';


      const $1 = (${3:props}) => (
        ${4:<div />}
      );

      export default ${1};
    """

  'New React Functional Arrow Component export default with PropTypes':
    prefix: 'nf-rarp'
    body: """
      import React from 'react';
      import PropTypes from 'prop-types';


      const $1 = (${3:props}) => (
        ${4:<div />}
      );

      ${1}.propTypes = {
        ${2}
      };

      export default ${1};
    """

  'React getDerivedStateFromProps':
    prefix: 'gdsfp'
    body: """
      static getDerivedStateFromProps(nextProps, prevState) {
        ${1}
      }
    """

  'React componentWillMount':
    prefix: 'cwm'
    body: """
      UNSAFE_componentWillMount() {
        ${1}
      }
    """

  'React componentDidMount':
    prefix: 'cdm'
    body: """
      componentDidMount() {
        ${1}
      }
    """

  'React componentWillReceiveProps':
    prefix: 'cwrp'
    body: """
      UNSAFE_componentWillReceiveProps(nextProps) {
        ${1}
      }
    """

  'React shouldComponentUpdate':
    prefix: 'scu'
    body: """
      shouldComponentUpdate(nextProps, nextState) {
        ${1}
      }
    """

  'React componentWillUpdate':
    prefix: 'cwu'
    body: """
      UNSAFE_componentWillUpdate(nextProps, nextState) {
        ${1}
      }
    """


  'React getSnapshotBeforeUpdate':
    prefix: 'gsbu'
    body: """
      getSnapshotBeforeUpdate(prevProps, prevState) {
        ${1}
      }
    """


  'React componentDidUpdate':
    prefix: 'cdu'
    body: """
      componentDidUpdate(prevProps, prevState) {
        ${1}
      }
    """

  'React componentWillUnmount':
    prefix: 'cwun'
    body: """
      componentWillUnmount() {
        ${1}
      }
    """

  'React componentDidCatch':
    prefix: 'cdc'
    body: """
      componentDidCatch() {
        ${1}
      }
    """

  'React this.props':
    prefix: 'props'
    body: 'this.props${1}'

  'React this.state':
    prefix: 'state'
    body: 'this.state${1}'

  'React cx({ ... }) )':
    prefix: 'cx'
    body: """
      cx({
        ${1}: ${2},
      })
    """

  'React static defaultProps = { ... } )':
    prefix: 'dp'
    body: """
      static defaultProps = {
        ${1}
      };
    """

  'React static propTypes = { ... } )':
    prefix: 'pt'
    body: """
      static propTypes = {
        ${1}: PropTypes.${2:string},
      };
    """

  'React static contextTypes = { ... } )':
    prefix: 'ct'
    body: """
      static contextTypes = {
        ${1}: PropTypes.${2:string},
      };
    """

  'React static childContextTypes = { ... } )':
    prefix: 'cct'
    body: """
      static childContextTypes = {
        ${1}: PropTypes.${2:string},
      };
    """

  'React getChildContext':
    prefix: 'gcct'
    body: """
      getChildContext() {
        return ${1}
      }
    """

  'React setState({ ... }) )':
    prefix: 'sst'
    body: """
      this.setState({
        ${1}: ${2},
      });
    """

  'React setState({ ... }), callback)':
    prefix: 'sstcb'
    body: """
      this.setState({
        ${1}: ${2},
      }, () => {

      });
    """

  'React setState(() => { ... }))':
    prefix: 'sstfn'
    body: """
      this.setState((state, props) => {
        return {
          ${1}: ${2},
        }
      });
    """

  'React setState(() => { ... }), callback)':
    prefix: 'sstfncb'
    body: """
      this.setState((state, props) => {
        return {
          ${1}: ${2},
        }
      }, () => {

      });
    """

  # PropType array
  'PropTypes.array':
    prefix: 'pta'
    body: 'PropTypes.array'
  'PropTypes.array.isRequired':
    prefix: 'ptar'
    body: 'PropTypes.array.isRequired'

  # PropType bool
  'PropTypes.bool':
    prefix: 'ptb'
    body: 'PropTypes.bool'
  'PropTypes.bool.isRequired':
    prefix: 'ptbr'
    body: 'PropTypes.bool.isRequired'

  # PropType function
  'PropTypes.func':
    prefix: 'ptf'
    body: 'PropTypes.func'
  'PropTypes.func.isRequired':
    prefix: 'ptfr'
    body: 'PropTypes.func.isRequired'

  # PropType number
  'PropTypes.number':
    prefix: 'ptn'
    body: 'PropTypes.number'
  'PropTypes.number.isRequired':
    prefix: 'ptnr'
    body: 'PropTypes.number.isRequired'

  # PropType object
  'PropTypes.object':
    prefix: 'ptobj'
    body: 'PropTypes.object'
  'PropTypes.object.isRequired':
    prefix: 'ptobjr'
    body: 'PropTypes.object.isRequired'

  # PropType string
  'PropTypes.string':
    prefix: 'pts'
    body: 'PropTypes.string'
  'PropTypes.string.isRequired':
    prefix: 'ptsr'
    body: 'PropTypes.string.isRequired'

  # PropType node
  'PropTypes.node':
    prefix: 'ptnode'
    body: 'PropTypes.node'
  'PropTypes.node.isRequired':
    prefix: 'ptnoder'
    body: 'PropTypes.node.isRequired'

  # PropType element
  'PropTypes.element':
    prefix: 'pte'
    body: 'PropTypes.element'
  'PropTypes.element.isRequired':
    prefix: 'pter'
    body: 'PropTypes.element.isRequired'

  # PropType instanceOf
  'PropTypes.instanceOf':
    prefix: 'pti'
    body: 'PropTypes.instanceOf(${1})'
  'PropTypes.instanceOf.isRequired':
    prefix: 'ptir'
    body: 'PropTypes.instanceOf(${1}).isRequired'

  # PropType oneOf
  'PropTypes.oneOf':
    prefix: 'ptof'
    body: 'PropTypes.oneOf([${1}])'
  'PropTypes.oneOf.isRequired':
    prefix: 'ptofr'
    body: 'PropTypes.oneOf([${1}]).isRequired'

  # PropType oneOfType
  'PropTypes.oneOfType':
    prefix: 'ptoft'
    body: """
      PropTypes.oneOfType([
        ${1}
      ])
    """
  'PropTypes.oneOfType.isRequired':
    prefix: 'ptoftr'
    body: """
      PropTypes.oneOfType([
        ${1}
      ]).isRequired
    """

  # PropType arrayOf
  'PropTypes.arrayOf':
    prefix: 'ptao'
    body: 'PropTypes.arrayOf(${1})'
  'PropTypes.arrayOf.isRequired':
    prefix: 'ptaor'
    body: 'PropTypes.arrayOf(${1}).isRequired'

  # PropType objectOf
  'PropTypes.objectOf':
    prefix: 'ptobjo'
    body: 'PropTypes.objectOf(${1})'
  'PropTypes.objectOf.isRequired':
    prefix: 'ptobjor'
    body: 'PropTypes.objectOf(${1}).isRequired'

  # PropType shape
  'PropTypes.shape({...})':
    prefix: 'ptshape'
    body: """
      PropTypes.shape({
        ${1}
      })
    """
  'PropTypes.shape({...}).isRequired':
    prefix: 'ptshaper'
    body: """
      PropTypes.shape({
        ${1}
      }).isRequired
    """

  # PropType any
  'PropTypes.any':
    prefix: 'ptany'
    body: 'PropTypes.any'
  'PropTypes.any.isRequired':
    prefix: 'ptanyr'
    body: 'PropTypes.any.isRequired'

  # GraphQL Type
  'GraphQL Type':
    prefix: 'gqltype'
    body: '{ type: $1 }'
  # GraphQL Resolved Type
  'GraphQL Resolved Type':
    prefix: 'gqltype'
    body: '''
      {
          type: $1
          resolve: ($2) => $3
      }
    '''
  # GraphQL Schema
  'GraphQLSchema':
    prefix: 'gqlsch'
    body: '{ type: GraphQLSchema }'
  # GraphQL ScalarType
  'GraphQLScalarType':
    prefix: 'gqlsca'
    body: '{ type: GraphQLScalarType }'
  # GraphQL ObjectType export
  'export GraphQLObjectType':
    prefix: 'gqleobj'
    body: '''
      export const $1Type = new GraphQLObjectType({
          name: '$1',
          fields: {
              $2
          }
      })
    '''
  # GraphQL ObjectType
  'GraphQLObjectType':
    prefix: 'gqlobj'
    body: '''
      new GraphQLObjectType({
          name: '$1',
          fields: {
              $2
          }
      })
    '''
  # GraphQL InterfaceType
  'GraphQLInterfaceType':
    prefix: 'gqlinterface'
    body: '''
      export const $1 = GraphQLInterfaceType({
          name: '$1',
          fields: {
              $2
          }
      })
    '''

  # GraphQL UnionType
  'GraphQLUnionType':
    prefix: 'gqluni'
    body: '{ type: GraphQLUnionType }'
  # GraphQL EnumType
  'GraphQLEnumType':
    prefix: 'gqlenu'
    body: '{ type: GraphQLEnumType }'
  # GraphQL InputObjectType
  'GraphQLInputObjectType':
    prefix: 'gqlinp'
    body: '{ type: GraphQLInputObjectType }'
  # GraphQL List
  'GraphQLList':
    prefix: 'gqllis'
    body: '{ type: new GraphQLList($1) }'
  # GraphQL NonNull Int
  'GraphQLNonNull(GraphQLInt)':
    prefix: 'gqlnonint'
    body: '{ type: new GraphQLNonNull(GraphQLInt) }'
  # GraphQL NonNull Float
  'GraphQLNonNull(GraphQLFloat)':
    prefix: 'gqlnonfloat'
    body: '{ type: new GraphQLNonNull(GraphQLFloat) }'
  # GraphQL NonNull String
  'GraphQLNonNull(GraphQLString)':
    prefix: 'gqlnonstring'
    body: '{ type: new GraphQLNonNull(GraphQLString) }'
  # GraphQL NonNull Boolean
  'GraphQLNonNull(GraphQLBoolean)':
    prefix: 'gqlnonbool'
    body: '{ type: new GraphQLNonNull(GraphQLBoolean) }'
  # GraphQL NonNull ID
  'GraphQLNonNull(ID)':
    prefix: 'gqlnonid'
    body: '{ type: new GraphQLNonNull(ID) }'
  # GraphQL NonNull
  'GraphQLNonNull':
    prefix: 'gqlnon'
    body: '{ type: new GraphQLNonNull($1) }'
  # GraphQL Directive
  'GraphQLDirective':
    prefix: 'gqldir'
    body: '{ type: GraphQLDirective }'
  # GraphQL Int
  'GraphQLInt':
    prefix: 'gqlint'
    body: '{ type: GraphQLInt }'
  # GraphQL Float
  'GraphQLFloat':
    prefix: 'gqlflo'
    body: '{ type: GraphQLFloat }'
  # GraphQL String
  'GraphQLString':
    prefix: 'gqlstr'
    body: '{ type: GraphQLString }'
  # GraphQL Boolean
  'GraphQLBoolean':
    prefix: 'gqlboo'
    body: '{ type: GraphQLBoolean }'
  # GraphQL ID
  'GraphQLID':
    prefix: 'gqlid'
    body: '{ type: GraphQLID }'
  # GraphQL IncludeDirective
  'GraphQLIncludeDirective':
    prefix: 'gqlinc'
    body: '{ type: GraphQLIncludeDirective }'
  # GraphQL SkipDirective
  'GraphQLSkipDirective':
    prefix: 'gqlski'
    body: '{ type: GraphQLSkipDirective }'
  # GraphQL DeprecatedDirective
  'GraphQLDeprecatedDirective':
    prefix: 'gqldep'
    body: '{ type: GraphQLDeprecatedDirective }'
  # GraphQL Error
  'GraphQLError':
    prefix: 'gqlerr'
    body: '{ type: GraphQLError }'

'.source.css':
    'whatev':
        prefix: 'txtshd'
        body: """
        text-shadow:
            1px 0px 1px var(--altBlue),
            0px 1px 1px var(--altBlue),
            -1px 0px 1px var(--altBlue),
            0px -1px 1px var(--altBlue),
            1px 1px 1px var(--altBlue),
            -1px -1px 1px var(--altBlue),
            1px -1px 1px var(--altBlue),
            -1px 1px 1px var(--altBlue),
            2px 0px 1px var(--altBlue),
            0px 2px 1px var(--altBlue),
            -2px 0px 1px var(--altBlue),
            0px -2px 1px var(--altBlue),
            2px 1px 1px var(--altBlue),
            1px 2px 1px var(--altBlue),
            -2px 1px 2px var(--altBlue),
            1px -2px 1px var(--altBlue),
            2px 2px 1px var(--altBlue),
            -2px -2px 1px var(--altBlue),
            2px -2px 1px var(--altBlue),
            -2px 2px 1px var(--altBlue)
        ;
        """
